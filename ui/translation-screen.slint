import { TopBar } from "top-bar.slint";
import { TextInputArea } from "text-input-area.slint";
import { TranslationOutputArea } from "translation-output-area.slint";
import { FloatingActionButton } from "floating-action-button.slint";
import { MissingLanguageCard } from "missing-language-card.slint";
import { AppTheme } from "theme.slint";
import { Language, Direction, DetectedLanguage } from "language.slint";
import { VerticalBox, ScrollView } from "std-widgets.slint";


export component TranslationScreen {
    in-out property <Language> source-language;
    in-out property <Language> target-language;
    in-out property <string> input-text;
    in-out property <string> output-text;

    in property <bool> swap-enabled: source-language.direction == Direction.Both && target-language.direction == Direction.Both;

    in property <[Language]> installed-languages;
    in property <[string]> installed-from-language-names;
    in property <[string]> installed-to-language-names;

    in property <DetectedLanguage> detected-language;
    in property <bool> show-missing-card: detected-language.reliable && detected-language.language.direction != Direction.ToOnly && detected-language.language.code != source-language.code;

    callback swap-languages();
    callback settings-clicked();
    callback camera-clicked();
    callback text-changed();
    callback set-from(string);
    callback set-to(string);
    callback download-language(Language);

    VerticalBox {
        vertical-stretch: 1;
        TopBar {
            source-language: root.source-language;
            target-language: root.target-language;
            installed-from-language-names: root.installed-from-language-names;
            installed-to-language-names: root.installed-to-language-names;

            swap-enabled: root.swap-enabled;

            swap-languages => {
                root.swap-languages();
            }
            settings-clicked => {
                root.settings-clicked();
            }
            set-from(name) => {
                root.set-from(name);
            }
            set-to(name) => {
                root.set-to(name);
            }
        }

        VerticalBox {
            padding-left: 16px;
            padding-right: 16px;
            TextInputArea {
                vertical-stretch: 1;
                text <=> root.input-text;
                changed => {
                    root.text-changed();
                }
            }

            if root.show-missing-card: MissingLanguageCard {
                language: root.detected-language.language;
                action-clicked => {
                    if (root.detected-language.language.installed) {
                        root.set-from(root.detected-language.language.name);
                    } else {
                        root.download-language(root.detected-language.language);
                    }
                }
            }

            if !root.show-missing-card: Rectangle {
                horizontal-stretch: 1;
                height: 0px;
                Rectangle {
                    height: 4px;
                    x: parent.width / 4;
                    width: parent.width / 2;
                    border-radius: 2px;
                    background: AppTheme.border;
                }
            }

            TranslationOutputArea {
                vertical-stretch: 1;
                translation-text: root.output-text;
            }
        }
    }

    FloatingActionButton {
        icon: @image-url("assets/camera.svg");
        x: parent.width - self.width - 24px;
        y: parent.height - self.height - 24px;
        clicked => {
            root.camera-clicked();
        }
    }
}
