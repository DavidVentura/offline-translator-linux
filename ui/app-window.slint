import { Screen } from "navigation.slint";
import { TranslationScreen } from "translation-screen.slint";
import { NoLanguagesScreen } from "no-languages-screen.slint";
import { SettingsScreen } from "settings-screen.slint";
import { ManageLanguagesScreen } from "manage-languages-screen.slint";
import { Language } from "language.slint";
import { AppTheme } from "theme.slint";

export component AppWindow inherits Window {
    title: "Offline Translator";
    background: AppTheme.background;
    preferred-width: 500px;
    preferred-height: 800px;

    out property <bool> has-languages: installed-languages.length > 0;
    in-out property <Screen> current-screen: Screen.NoLanguages; // FIXME has-languages ? Screen.Translation : Screen.NoLanguages;

    in-out property <string> source-language: "Dutch";
    in-out property <string> target-language: "English";
    in-out property <string> input-text;
    in-out property <string> output-text;

    in-out property <[Language]> installed-languages;
    in-out property <[Language]> available-languages;

    in property <image> swap-icon: @image-url("../assets/swap.svg");
    in property <image> settings-icon: @image-url("../assets/settings.svg");
    in property <image> camera-icon: @image-url("../assets/camera.svg");
    in property <image> back-icon: @image-url("../assets/back.svg");
    in property <image> download-icon: @image-url("../assets/download.svg");
    in property <image> delete-icon: @image-url("../assets/delete.svg");

    callback swap-languages();
    callback camera-clicked();
    callback process-text(string) -> string;
    callback download-language(Language);
    callback delete-language(Language);

    if current-screen == Screen.NoLanguages: NoLanguagesScreen {
        width: 100%;
        height: 100%;
        settings-icon: root.settings-icon;
        download-icon: root.download-icon;
        delete-icon: root.delete-icon;
        installed-languages: root.installed-languages;
        available-languages: root.available-languages;

        settings-clicked => {
            root.current-screen = Screen.Settings;
        }
        download-language(lang) => {
            root.download-language(lang);
        }
        delete-language(lang) => {
            root.delete-language(lang);
        }
        done-clicked => {
            root.current-screen = Screen.Translation;
        }
    }

    if current-screen == Screen.Translation: TranslationScreen {
        width: 100%;
        height: 100%;
        source-language <=> root.source-language;
        target-language <=> root.target-language;
        input-text <=> root.input-text;
        output-text <=> root.output-text;
        swap-icon: root.swap-icon;
        settings-icon: root.settings-icon;
        camera-icon: root.camera-icon;

        swap-languages => {
            root.swap-languages();
        }
        settings-clicked => {
            root.current-screen = Screen.Settings;
        }
        camera-clicked => {
            root.camera-clicked();
        }
        text-changed => {
            root.output-text = root.process-text(root.input-text);
        }
    }

    if current-screen == Screen.Settings: SettingsScreen {
        width: 100%;
        height: 100%;
        back-icon: root.back-icon;
        back-clicked => {
            root.current-screen = Screen.Translation;
        }
    }

    if current-screen == Screen.ManageLanguages: ManageLanguagesScreen {
        width: 100%;
        height: 100%;
        back-icon: root.back-icon;
        download-icon: root.download-icon;
        delete-icon: root.delete-icon;
        installed-languages: root.installed-languages;
        available-languages: root.available-languages;

        back-clicked => {
            root.current-screen = root.has-languages ? Screen.Translation : Screen.NoLanguages;
        }
        download-language(lang) => {
            root.download-language(lang);
        }
        delete-language(lang) => {
            root.delete-language(lang);
        }
    }
}
